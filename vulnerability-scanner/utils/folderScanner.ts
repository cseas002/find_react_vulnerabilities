import fs from 'fs'
import path from 'path'

export type FileContent = {
    name: string
    content: string
    relativePath: string
}

export async function scanFolder(folderPath: string): Promise<FileContent[]> {
    const files: FileContent[] = []
    const excludedDirs = ['node_modules', '.git', 'dist', 'build', '.next']

    async function scanDirectory(dirPath: string, relativePath: string = '') {
        const entries = await fs.promises.readdir(dirPath, { withFileTypes: true })

        for (const entry of entries) {
            const fullPath = path.join(dirPath, entry.name)
            const relativeFilePath = path.join(relativePath, entry.name)

            if (entry.isDirectory()) {
                if (!excludedDirs.includes(entry.name)) {
                    await scanDirectory(fullPath, relativeFilePath)
                }
            } else {
                // Only include text files and common code files
                const ext = path.extname(entry.name).toLowerCase()
                const textExtensions = [
                    '.js', '.jsx', '.ts', '.tsx', '.json', '.html', '.css', '.scss',
                    '.md', '.txt', '.yml', '.yaml', '.env', '.config.js'
                ]

                if (textExtensions.includes(ext)) {
                    try {
                        const content = await fs.promises.readFile(fullPath, 'utf-8')
                        files.push({
                            name: entry.name,
                            content,
                            relativePath: relativeFilePath
                        })
                    } catch (err) {
                        console.error(`Error reading file ${fullPath}:`, err)
                    }
                }
            }
        }
    }

    await scanDirectory(folderPath)
    return files
} 