import { NextResponse } from 'next/server'
import OpenAI from 'openai'

// Clean up the response content to handle LaTeX formatting and ensure valid JSON
function cleanResponseContent(content: string): string {
    try {
        let cleaned = content.trim()
        let boxedRemoved = false

        // Remove leading \boxed{ if present
        if (/^\\boxed\s*{/.test(cleaned)) {
            cleaned = cleaned.replace(/^\\boxed\s*{[\r\n]*/, '')
            boxedRemoved = true
        }
        // Remove trailing } only if we removed \boxed{
        if (boxedRemoved) {
            cleaned = cleaned.replace(/[\r\n]*\s*}$/, '')
        }
        // Remove code block markers
        cleaned = cleaned.replace(/^```json[\r\n]*/, '').replace(/[\r\n]*```$/, '')

        // Now extract the JSON object
        const jsonMatch = cleaned.match(/{[\s\S]*}/)
        if (!jsonMatch || !jsonMatch[0]) {
            throw new Error('Could not find JSON object structure in the cleaned response')
        }

        const potentialJson = jsonMatch[0]
        // Validate it's proper JSON
        JSON.parse(potentialJson)
        return potentialJson
    } catch (error) {
        console.error('Error cleaning response:', error)
        throw error
    }
}

export async function POST(request: Request) {
    try {
        const { folderPath, projectType, files } = await request.json()

        const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY

        if (!DEEPSEEK_API_KEY) {
            return NextResponse.json(
                { error: 'DeepSeek API configuration is missing' },
                { status: 500 }
            )
        }

        if (!files || files.length === 0) {
            return NextResponse.json(
                { error: 'No files provided for scanning' },
                { status: 400 }
            )
        }

        const openai = new OpenAI({
            apiKey: DEEPSEEK_API_KEY,
            baseURL: "https://openrouter.ai/api/v1"
        })

        // Create a prompt for vulnerability scanning
        const prompt = `Analyze the following ${projectType} project files for security vulnerabilities. 
        Perform a thorough security analysis focusing on both obvious and subtle security issues.
        
        Pay special attention to:
        1. Security vulnerabilities in dependencies (check package.json)
        2. Unsafe practices in the code:
           - XSS vulnerabilities (including template injection)
           - SQL/NoSQL injection
           - Command injection
           - Path traversal
           - ReDoS (Regular Expression Denial of Service)
           - Logic vulnerabilities
           - Race conditions
           - Memory leaks
           - Unsafe deserialization
        3. Configuration and environment issues:
           - Hardcoded credentials
           - Insecure defaults
           - Missing security headers
           - CORS misconfiguration
        4. Authentication and authorization:
           - Weak password policies
           - Session management issues
           - Missing access controls
           - Insecure direct object references
        5. Data handling:
           - Unsafe data storage
           - Missing input validation
           - Insecure data transmission
           - PII exposure
        
        Project files:
        ${files.map((file: { name: string, content: string }) => `
        File: ${file.name}
        Content:
        ${file.content}
        ---
        `).join('\n')}
        
        Please provide a detailed analysis in the following JSON format:
        {
          "vulnerabilities": [
            {
              "severity": "high|medium|low|info",
              "type": "xss|injection|auth|config|logic|other",
              "description": "detailed description of the vulnerability",
              "location": "file path and line number",
              "recommendation": "how to fix the vulnerability",
              "cwe": "relevant CWE ID if applicable"
            }
          ]
        }`

        console.log('Sending request to OpenAI...')
        const completion = await openai.chat.completions.create({
            model: "deepseek/deepseek-r1-zero:free",
            messages: [
                {
                    role: "system",
                    content: "You are a security expert specializing in code vulnerability analysis. Your task is to find both obvious and subtle security issues in the code. Pay special attention to logic vulnerabilities, ReDoS, XSS (including template injection), and other complex security issues. Return your analysis in valid JSON format without any LaTeX formatting or special characters."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            response_format: { type: "json_object" }
        })

        // Log the response for debugging
        console.log('API Response:', JSON.stringify(completion, null, 2))

        // Check if we have a valid response
        if (!completion.choices || completion.choices.length === 0) {
            console.error('No choices in API response:', completion)
            return NextResponse.json(
                { error: 'Invalid response from AI model' },
                { status: 500 }
            )
        }

        const content = completion.choices[0].message?.content
        if (!content) {
            console.error('No content in API response:', completion)
            return NextResponse.json(
                { error: 'No content in AI model response' },
                { status: 500 }
            )
        }

        try {
            // Clean the content before parsing
            console.log('Starting content cleaning...')
            const cleanedContent = cleanResponseContent(content)
            console.log('Final cleaned content:', cleanedContent)

            const result = JSON.parse(cleanedContent)
            console.log('Successfully parsed JSON:', result)
            return NextResponse.json(result)
        } catch (parseError) {
            console.error('Failed to parse AI response:', content)
            console.error('Parse error:', parseError)
            return NextResponse.json(
                { error: 'Failed to parse AI model response' },
                { status: 500 }
            )
        }
    } catch (error) {
        console.error('Scan error:', error)
        return NextResponse.json(
            { error: 'Failed to scan project' },
            { status: 500 }
        )
    }
} 