'use client'

import { useState, useRef } from 'react'
import { FiAlertCircle, FiCheckCircle, FiFolder, FiFile, FiChevronDown, FiChevronRight, FiExternalLink, FiAlertTriangle } from 'react-icons/fi'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { vscDarkPlus } from 'react-syntax-highlighter/dist/cjs/styles/prism'

type ScanResult = {
  vulnerabilities: Array<{
    severity: string
    type: string
    description: string
    location: string
    recommendation: string
    cwe?: string
  }>
}

interface DirectoryInputElement extends HTMLInputElement {
  webkitdirectory: boolean
}

type FileContent = {
  name: string
  content: string
}

// Priority order for files
const FILE_PRIORITY: Record<string, number> = {
  'package.json': 1,
  'package-lock.json': 2,
  'yarn.lock': 2,
  'tsconfig.json': 3,
  '.env': 4,
  'next.config.js': 5,
  'vite.config.js': 5,
  'webpack.config.js': 5,
  '.eslintrc': 6,
  '.prettierrc': 6,
}

// Rough estimation of tokens (4 characters ≈ 1 token)
const MAX_FILE_SIZE = 10 * 1024 // 10KB (very conservative to avoid token limits)
const MAX_FILES = 4 // Maximum number of files to process (very conservative)
const MAX_TOTAL_TOKENS = 40000 // Very conservative limit to stay well under 128k

// Rough token estimation
function estimateTokens(text: string): number {
  return Math.ceil(text.length / 4)
}

// Helper function to get severity color
function getSeverityColor(severity: string) {
  switch (severity.toLowerCase()) {
    case 'high':
      return 'text-red-600'
    case 'medium':
      return 'text-orange-500'
    case 'low':
      return 'text-yellow-500'
    case 'info':
      return 'text-blue-500'
    default:
      return 'text-gray-500'
  }
}

// Helper function to get type color
function getTypeColor(type: string) {
  switch (type.toLowerCase()) {
    case 'xss':
      return 'bg-red-100 text-red-800'
    case 'injection':
      return 'bg-orange-100 text-orange-800'
    case 'auth':
      return 'bg-purple-100 text-purple-800'
    case 'config':
      return 'bg-blue-100 text-blue-800'
    case 'logic':
      return 'bg-green-100 text-green-800'
    case 'other':
      return 'bg-sky-100 text-sky-800'
    default:
      return 'bg-gray-100 text-gray-800'
  }
}

// Helper to get highest severity for a file
function getFileSeverity(file: string, fileVulns: Record<string, any>, allResults: any[]) {
  const vulns = fileVulns[file] || [];
  if (vulns.some((v: any) => v.severity === 'high')) return 'high';
  if (vulns.some((v: any) => v.severity === 'medium')) return 'medium';
  if (vulns.some((v: any) => v.severity === 'low')) return 'low';
  return null;
}

// Sidebar status logic
function getFileStatus(file: string, scannedFiles: string[], allResults: any[]): string {
  if (scannedFiles.includes(file)) {
    const vulns = allResults.flatMap((r: any) => r?.vulnerabilities || []).filter((v: any) => v.location.split('(')[0].trim() === file);
    if (vulns.length > 0) return 'vulnerable';
    return 'clean';
  }
  return 'not scanned';
}

function fileHighlightClass(file: string, fileVulns: Record<string, any>, allResults: any[], scannedFiles: string[]) {
  const status = getFileStatus(file, scannedFiles, allResults);
  if (status === 'vulnerable') return 'bg-red-900/60 text-red-200 font-bold';
  if (status === 'clean') return 'bg-green-900/60 text-green-200 font-bold';
  if (status === 'not scanned') return 'text-gray-500 italic';
  return 'text-gray-300 hover:bg-gray-800';
}

// Component for displaying a file tree
function FileTree({ vulnerabilities }: { vulnerabilities: ScanResult['vulnerabilities'] }) {
  const [expandedFiles, setExpandedFiles] = useState<Record<string, boolean>>({})
  const [expandedVulns, setExpandedVulns] = useState<Record<string, boolean>>({})

  // Group vulnerabilities by file
  const fileGroups = vulnerabilities.reduce((acc, vuln) => {
    const file = vuln.location.split('(')[0].trim()
    if (!acc[file]) {
      acc[file] = []
    }
    acc[file].push(vuln)
    return acc
  }, {} as Record<string, typeof vulnerabilities>)

  const toggleFile = (file: string) => {
    setExpandedFiles(prev => ({
      ...prev,
      [file]: !prev[file]
    }))
  }

  const toggleVuln = (id: string) => {
    setExpandedVulns(prev => ({
      ...prev,
      [id]: !prev[id]
    }))
  }

  return (
    <div className="mt-4 space-y-2">
      {Object.entries(fileGroups).map(([file, vulns]) => (
        <div key={file} className="border rounded-lg overflow-hidden">
          <button
            onClick={() => toggleFile(file)}
            className="w-full px-4 py-2 bg-gray-50 hover:bg-gray-100 flex items-center justify-between"
          >
            <div className="flex items-center space-x-2">
              {expandedFiles[file] ? <FiChevronDown /> : <FiChevronRight />}
              <FiFile className="text-gray-500" />
              <span className="font-medium">{file}</span>
            </div>
            <span className="text-sm text-gray-500">{vulns.length} issues</span>
          </button>

          {expandedFiles[file] && (
            <div className="p-4 space-y-4">
              {vulns.map((vuln, index) => (
                <div key={`${file}-${index}`} className="border-l-4 border-red-500 pl-4">
                  <button
                    onClick={() => toggleVuln(`${file}-${index}`)}
                    className="w-full text-left"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {expandedVulns[`${file}-${index}`] ? <FiChevronDown /> : <FiChevronRight />}
                        <FiAlertTriangle className={getSeverityColor(vuln.severity)} />
                        <span className="font-medium">{vuln.description}</span>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs ${getTypeColor(vuln.type)}`}>
                        {vuln.type}
                      </span>
                    </div>
                  </button>

                  {expandedVulns[`${file}-${index}`] && (
                    <div className="mt-2 space-y-2 text-sm">
                      <p><strong>Severity:</strong> <span className={getSeverityColor(vuln.severity)}>{vuln.severity}</span></p>
                      <p><strong>Location:</strong> {vuln.location}</p>
                      <p><strong>Recommendation:</strong> {vuln.recommendation}</p>
                      {vuln.cwe && (
                        <p>
                          <strong>CWE:</strong>{' '}
                          <a
                            href={`https://cwe.mitre.org/data/definitions/${vuln.cwe.replace('CWE-', '')}.html`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
                          >
                            <span>{vuln.cwe}</span>
                            <FiExternalLink className="inline" />
                          </a>
                        </p>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  )
}

const BATCH_SIZE = 4;

export default function Home() {
  const [selectedFiles, setSelectedFiles] = useState<FileContent[]>([])
  const [projectType, setProjectType] = useState<'react' | 'vue' | 'node'>('react')
  const [activelyScanningBatches, setActivelyScanningBatches] = useState<Set<number>>(new Set());
  const [currentBatch, setCurrentBatch] = useState(0);
  const [allResults, setAllResults] = useState<ScanResult[]>([]);
  const [error, setError] = useState<string | null>(null)
  const [selectedFile, setSelectedFile] = useState<string | null>(null)
  const [sidebarWidth, setSidebarWidth] = useState(260);
  const [rightPanelWidth, setRightPanelWidth] = useState(380);
  const resizingSidebar = useRef(false);
  const resizingRightPanel = useRef(false);
  const [scannedFiles, setScannedFiles] = useState<string[]>([]);
  const [autoScanning, setAutoScanning] = useState(false);
  const [failedBatches, setFailedBatches] = useState<number[]>([]);
  const [scanCompleted, setScanCompleted] = useState(false);
  const [showCompletionMessage, setShowCompletionMessage] = useState(false);

  // Calculate batches and current batch files
  const totalBatches = Math.ceil(selectedFiles.length / BATCH_SIZE);
  const batchFiles = selectedFiles.slice(currentBatch * BATCH_SIZE, (currentBatch + 1) * BATCH_SIZE);
  const unscannedFiles = selectedFiles.filter(f => !scannedFiles.includes(f.name));
  const unscannedInCurrentBatch = batchFiles.filter(f => !scannedFiles.includes(f.name));
  const results = allResults[currentBatch] || null;

  // Check if all files are scanned
  const allFilesScanned = selectedFiles.length > 0 && unscannedFiles.length === 0;

  // Get vulnerabilities from ALL scanned batches (like before)
  const allVulns = allResults
    .filter(r => r && r.vulnerabilities) // Filter out null/undefined results
    .flatMap(r => r.vulnerabilities)
    .filter((vuln, index, arr) => {
      // Remove duplicates based on description + location + severity
      const key = `${vuln.description}-${vuln.location}-${vuln.severity}`;
      return arr.findIndex(v => `${v.description}-${v.location}-${v.severity}` === key) === index;
    });

  const allFileVulns = allVulns.reduce((acc, vuln) => {
    const file = vuln.location.split('(')[0].trim();
    if (!acc[file]) acc[file] = [];
    acc[file].push(vuln);
    return acc;
  }, {} as Record<string, typeof allVulns>);

  // Normalize file names to match selectedFiles format
  const normalizedFileVulns: Record<string, typeof allVulns> = {};
  Object.entries(allFileVulns).forEach(([vulnFileName, vulns]) => {
    // Find the matching file in selectedFiles
    const matchingFile = selectedFiles.find(f =>
      f.name === vulnFileName ||
      f.name.endsWith(vulnFileName) ||
      f.name.endsWith('/' + vulnFileName) ||
      f.name.split('/').pop() === vulnFileName.split('/').pop()
    );

    if (matchingFile) {
      // Use the selectedFiles name format
      normalizedFileVulns[matchingFile.name] = vulns;
    } else {
      // Keep original name if no match found
      normalizedFileVulns[vulnFileName] = vulns;
    }
  });

  // Calculate vulnerability counts by severity for ALL vulnerabilities
  const highVulns = allVulns.filter(v => {
    const severity = v.severity?.toLowerCase()?.trim();
    return severity === 'high';
  });
  const mediumVulns = allVulns.filter(v => {
    const severity = v.severity?.toLowerCase()?.trim();
    return severity === 'medium';
  });
  const lowVulns = allVulns.filter(v => {
    const severity = v.severity?.toLowerCase()?.trim();
    return severity === 'low';
  });
  const infoVulns = allVulns.filter(v => {
    const severity = v.severity?.toLowerCase()?.trim();
    return severity === 'info';
  });

  const highCount = highVulns.length;
  const mediumCount = mediumVulns.length;
  const lowCount = lowVulns.length;
  const infoCount = infoVulns.length;
  const totalCount = allVulns.length;
  const calculatedTotal = highCount + mediumCount + lowCount;

  // All files in the project (from uploaded folder)
  const allFiles = selectedFiles.map(f => f.name);
  // Add any files from vulnerabilities not in selectedFiles (for completeness)
  Object.keys(allFileVulns).forEach(f => {
    if (!allFiles.includes(f)) allFiles.push(f);
  });

  // Get code for selected file - comprehensive matching logic
  const getFileContent = (fileName: string) => {
    if (!fileName) return '';

    // Try exact match first
    let file = selectedFiles.find(f => f.name === fileName);
    if (file) return file.content;

    // Try case-insensitive exact match
    file = selectedFiles.find(f => f.name.toLowerCase() === fileName.toLowerCase());
    if (file) return file.content;

    // If no exact match, try to find by filename only (without path)
    const targetFileName = fileName.split('/').pop() || fileName;
    file = selectedFiles.find(f => {
      const selectedFileName = f.name.split('/').pop() || f.name;
      return selectedFileName === targetFileName || selectedFileName.toLowerCase() === targetFileName.toLowerCase();
    });
    if (file) return file.content;

    // Try partial path matching (ends with the target)
    file = selectedFiles.find(f => f.name.endsWith(fileName) || f.name.endsWith('/' + fileName));
    if (file) return file.content;

    // Try removing common prefixes and matching
    const cleanFileName = fileName.replace(/^(forumerly\/|\.\/|src\/|app\/|pages\/|components\/|public\/|assets\/)/g, '');
    file = selectedFiles.find(f => {
      const cleanSelected = f.name.replace(/^(forumerly\/|\.\/|src\/|app\/|pages\/|components\/|public\/|assets\/)/g, '');
      return cleanSelected === cleanFileName ||
        cleanSelected.toLowerCase() === cleanFileName.toLowerCase() ||
        f.name.includes(cleanFileName) ||
        cleanFileName.includes(f.name.split('/').pop() || '');
    });
    if (file) return file.content;

    // Last resort: fuzzy matching - find any file that contains the target filename
    const baseFileName = fileName.split('/').pop()?.split('.')[0] || '';
    if (baseFileName) {
      file = selectedFiles.find(f => {
        const selectedBaseName = f.name.split('/').pop()?.split('.')[0] || '';
        return selectedBaseName.toLowerCase().includes(baseFileName.toLowerCase()) ||
          baseFileName.toLowerCase().includes(selectedBaseName.toLowerCase());
      });
      if (file) return file.content;
    }

    return '';
  };

  const selectedFileContent = getFileContent(selectedFile || '');
  const selectedFileVulns = selectedFile && normalizedFileVulns[selectedFile] ? normalizedFileVulns[selectedFile] : [];

  // Resizing handlers
  function onMouseMove(e: MouseEvent) {
    if (resizingSidebar.current) {
      setSidebarWidth(Math.max(160, Math.min(e.clientX - 32, 500)));
    } else if (resizingRightPanel.current) {
      setRightPanelWidth(Math.max(260, Math.min(window.innerWidth - e.clientX - 32, 600)));
    }
  }
  function onMouseUp() {
    resizingSidebar.current = false;
    resizingRightPanel.current = false;
    window.removeEventListener('mousemove', onMouseMove);
    window.removeEventListener('mouseup', onMouseUp);
  }
  function startSidebarResize() {
    resizingSidebar.current = true;
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
  }
  function startRightPanelResize() {
    resizingRightPanel.current = true;
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
  }

  const handleFolderSelect = async (event: React.ChangeEvent<DirectoryInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    // Reset all states when new folder is selected
    setScannedFiles([]);
    setAllResults([]);
    setCurrentBatch(0);
    setScanCompleted(false);
    setShowCompletionMessage(false);
    setFailedBatches([]);
    setError(null);

    const fileContents: FileContent[] = [];
    const excludedDirs = ['node_modules', '.git', 'dist', 'build', '.next'];
    const textExtensions = [
      '.js', '.jsx', '.ts', '.tsx', '.json', '.html', '.css', '.scss',
      '.md', '.txt', '.yml', '.yaml', '.env', '.config.js'
    ];

    // Collect all valid files (no limit)
    const validFiles: Array<{ file: File, priority: number }> = [];
    for (const file of Array.from(files)) {
      const path = file.webkitRelativePath;
      const parts = path.split('/');
      if (excludedDirs.some(dir => parts.includes(dir))) continue;
      const ext = path.split('.').pop()?.toLowerCase();
      if (!ext || !textExtensions.includes(`.${ext}`)) continue;
      const fileName = parts[parts.length - 1];
      const priority = FILE_PRIORITY[fileName] || 999;
      validFiles.push({ file, priority });
    }
    validFiles.sort((a, b) => a.priority - b.priority);

    // Read all valid files (no limit)
    for (const { file } of validFiles) {
      try {
        const content = await file.text();
        let finalContent = content;
        if (content.length > MAX_FILE_SIZE) {
          finalContent = content.slice(0, MAX_FILE_SIZE) + '\n... (content truncated at 10KB to stay within API limits)';
        }
        fileContents.push({
          name: file.webkitRelativePath,
          content: finalContent
        });
      } catch (err) {
        console.error(`Error reading file ${file.webkitRelativePath}:`, err);
      }
    }
    setSelectedFiles(fileContents);
  };

  // Retry logic with exponential backoff
  const retryBatch = async (batch: FileContent[], batchIndex: number, retryCount = 0, maxRetries = 3): Promise<any> => {
    try {
      const response = await fetch('/api/scan', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ files: batch, projectType }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to scan project');
      }
      return await response.json();
    } catch (err) {
      if (retryCount < maxRetries) {
        const delay = 1000 * Math.pow(2, retryCount); // Exponential backoff: 1s, 2s, 4s
        setError(`Batch ${batchIndex + 1} failed, retrying in ${delay / 1000}s... (attempt ${retryCount + 1}/${maxRetries})`);
        await new Promise(res => setTimeout(res, delay));
        return retryBatch(batch, batchIndex, retryCount + 1, maxRetries);
      }
      throw err; // Final failure after all retries
    }
  };

  // Scan a single batch
  const handleScan = async () => {
    const batchIndexToScan = currentBatch;
    const filesForThisBatch = unscannedInCurrentBatch.filter(f => !scannedFiles.includes(f.name));

    if (filesForThisBatch.length === 0) return;

    setActivelyScanningBatches(prev => new Set(prev).add(batchIndexToScan));
    setError(null);

    try {
      const data = await retryBatch(filesForThisBatch, batchIndexToScan);

      // Validate that vulnerabilities only reference files that were actually scanned
      if (data && data.vulnerabilities) {
        const scannedFileNamesInThisSpecificScan = filesForThisBatch.map(f => f.name);
        const validVulnerabilities = data.vulnerabilities.filter((vuln: any) => {
          const vulnFile = vuln.location.split('(')[0].trim().split(':')[0];
          const isValid = scannedFileNamesInThisSpecificScan.some(scannedFile =>
            scannedFile === vulnFile ||
            scannedFile.endsWith('/' + vulnFile) ||
            scannedFile.endsWith(vulnFile) ||
            vulnFile.endsWith(scannedFile.split('/').pop() || '')
          );
          if (!isValid) {
            console.warn(`Vulnerability references file "${vulnFile}" which was not in the scanned batch:`, scannedFileNamesInThisSpecificScan);
          }
          return isValid;
        });
        data.vulnerabilities = validVulnerabilities;
      }

      setAllResults(prev => {
        const updated = [...prev];
        updated[batchIndexToScan] = data;
        return updated;
      });
      setScannedFiles(prev => {
        const newScanned = [...prev, ...filesForThisBatch.map(f => f.name)];
        if (newScanned.length === selectedFiles.length) {
          setScanCompleted(true);
          setShowCompletionMessage(true);
          setTimeout(() => setShowCompletionMessage(false), 5000);
        }
        return newScanned;
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : `Failed to scan batch ${batchIndexToScan + 1} after 3 retries. Please try again.`);
    } finally {
      setActivelyScanningBatches(prev => {
        const updated = new Set(prev);
        updated.delete(batchIndexToScan);
        return updated;
      });
    }
  };

  // Scan all batches
  const handleScanAll = async () => {
    setAutoScanning(true);
    setCurrentBatch(0);
    let batchIdx = 0;
    let filesLeft = selectedFiles.filter(f => !scannedFiles.includes(f.name));
    let resultsArr = [...allResults];
    let scanned = [...scannedFiles];
    let failed: number[] = [];
    const totalBatchesToScan = Math.ceil(filesLeft.length / BATCH_SIZE);

    while (filesLeft.length > 0) {
      const batch = filesLeft.slice(0, BATCH_SIZE);
      try {
        setError(`Scanning batch ${batchIdx + 1} of ${totalBatchesToScan}...`);
        const data = await retryBatch(batch, batchIdx);

        // Validate that vulnerabilities only reference files that were actually scanned
        if (data && data.vulnerabilities) {
          const scannedFileNames = batch.map(f => f.name);
          const validVulnerabilities = data.vulnerabilities.filter((vuln: any) => {
            const vulnFile = vuln.location.split('(')[0].trim().split(':')[0]; // Remove line info and dependency info
            const isValid = scannedFileNames.some(scannedFile =>
              scannedFile === vulnFile ||
              scannedFile.endsWith('/' + vulnFile) ||
              scannedFile.endsWith(vulnFile) ||
              vulnFile.endsWith(scannedFile.split('/').pop() || '')
            );
            if (!isValid) {
              console.warn(`Vulnerability references file "${vulnFile}" which was not in the scanned batch:`, scannedFileNames);
            }
            return isValid;
          });
          data.vulnerabilities = validVulnerabilities;
        }

        resultsArr[batchIdx] = data;
        scanned = [...scanned, ...batch.map(f => f.name)];
        setAllResults([...resultsArr]);
        setScannedFiles([...scanned]);
        setCurrentBatch(batchIdx);
        setError(null); // Clear error on success
      } catch (err) {
        failed.push(batchIdx);
        setFailedBatches([...failed]);
        setError(`Batch ${batchIdx + 1} failed after 3 retries. Continuing with next batch...`);
        // Continue to next batch
      }
      batchIdx++;
      filesLeft = selectedFiles.filter(f => !scanned.includes(f.name));
      await new Promise(res => setTimeout(res, 500)); // Small delay for UI update
    }
    setAutoScanning(false);

    // Check if all files are now scanned
    if (scanned.length === selectedFiles.length) {
      setScanCompleted(true);
      setShowCompletionMessage(true);
      setTimeout(() => setShowCompletionMessage(false), 5000);
    }

    // Show final status
    if (failed.length > 0) {
      setError(`Scan completed with ${failed.length} failed batches: ${failed.map(b => b + 1).join(', ')}`);
    } else {
      setError(null);
    }
  };

  // Responsive 3-panel layout
  return (
    <div className="min-h-screen bg-gray-900 flex flex-col">
      <div className="max-w-7xl mx-auto w-full px-4 py-8 flex-1 flex flex-col">
        <h1 className="text-3xl font-bold text-gray-100 mb-8">Project Vulnerability Scanner</h1>

        {/* Always show upload/scan controls */}
        <div className="bg-gray-800 rounded-lg shadow-md p-6 mb-8">
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Project Type
            </label>
            <select
              value={projectType}
              onChange={(e) => setProjectType(e.target.value as any)}
              className="w-full p-2 border border-gray-700 rounded-md bg-gray-900 text-gray-100"
            >
              <option value="react">React</option>
              <option value="vue">Vue</option>
              <option value="node">Node.js</option>
            </select>
          </div>

          <div className="border-2 border-dashed rounded-lg p-8 text-center border-gray-700 bg-gray-900">
            <input
              type="file"
              // @ts-ignore
              webkitdirectory="true"
              onChange={handleFolderSelect}
              className="hidden"
              id="folder-input"
            />
            <label
              htmlFor="folder-input"
              className="cursor-pointer block"
            >
              <FiFolder className="mx-auto h-12 w-12 text-gray-500" />
              <p className="mt-2 text-sm text-gray-300">
                {selectedFiles.length > 0
                  ? `${selectedFiles.length} files selected (processing in batches of 4)`
                  : 'Click to select your project folder'}
              </p>
              <p className="mt-1 text-xs text-gray-400">
                (node_modules, .git, and other excluded directories will be ignored)<br />
                Files larger than 10KB will be truncated to avoid API token limits
              </p>
            </label>
          </div>

          {selectedFiles.length > 0 && (
            <div className="mt-4">
              <h3 className="text-sm font-medium text-gray-300 mb-2">
                Current Batch Files ({batchFiles.length} files, max 4 per batch):
              </h3>
              <ul className="text-sm text-gray-300 space-y-1 max-h-40 overflow-y-auto">
                {batchFiles.map((file, index) => (
                  <li key={index} className="truncate flex items-center justify-between">
                    <span>{file.name}</span>
                    <div className="flex items-center space-x-2">
                      {file.content.length > MAX_FILE_SIZE && (
                        <span className="text-yellow-400 text-xs">(truncated at 10KB)</span>
                      )}
                      {scannedFiles.includes(file.name) ? (
                        <span className="text-green-400 text-xs">✓ scanned</span>
                      ) : (
                        <span className="text-gray-500 text-xs">pending</span>
                      )}
                    </div>
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className="flex justify-between items-center mt-6">
            <div>
              {allFilesScanned ? (
                <span className="text-green-400 text-sm flex items-center">
                  <FiCheckCircle className="mr-1" />
                  All files scanned ({selectedFiles.length} files)
                </span>
              ) : (
                <span className="text-gray-400 text-sm">
                  Showing batch {selectedFiles.length > 0 ? currentBatch + 1 : 0} of {selectedFiles.length > 0 ? totalBatches : 0}
                  ({batchFiles.length} files in this batch)
                  {unscannedFiles.length > 0 && ` • ${unscannedFiles.length} files remaining`}
                </span>
              )}
            </div>
            <div className="space-x-2">
              {allFilesScanned ? (
                <button
                  onClick={() => {
                    setScannedFiles([]);
                    setAllResults([]);
                    setCurrentBatch(0);
                    setScanCompleted(false);
                    setShowCompletionMessage(false);
                    setFailedBatches([]);
                    setError(null);
                  }}
                  className="py-1 px-3 rounded bg-purple-600 text-white font-medium hover:bg-purple-700"
                >
                  Scan Again
                </button>
              ) : (
                <>
                  <button
                    onClick={() => setCurrentBatch(b => Math.max(0, b - 1))}
                    disabled={currentBatch === 0 || selectedFiles.length === 0}
                    className={`py-1 px-3 rounded bg-gray-700 text-gray-200 ${currentBatch === 0 || selectedFiles.length === 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-600'}`}
                  >Previous</button>
                  <button
                    onClick={() => setCurrentBatch(b => Math.min(totalBatches - 1, b + 1))}
                    disabled={currentBatch === totalBatches - 1 || selectedFiles.length === 0}
                    className={`py-1 px-3 rounded bg-gray-700 text-gray-200 ${currentBatch === totalBatches - 1 || selectedFiles.length === 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-600'}`}
                  >Next</button>
                  <button
                    onClick={handleScan}
                    disabled={unscannedInCurrentBatch.length === 0 || autoScanning || activelyScanningBatches.has(currentBatch)}
                    className={`py-1 px-3 rounded bg-blue-600 text-white font-medium ${unscannedInCurrentBatch.length === 0 || autoScanning || activelyScanningBatches.has(currentBatch) ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-700'}`}
                  >{activelyScanningBatches.has(currentBatch) ? 'Scanning...' : 'Scan This Batch'}</button>
                  <button
                    onClick={handleScanAll}
                    disabled={unscannedFiles.length === 0 || autoScanning || activelyScanningBatches.size > 0}
                    className={`py-1 px-3 rounded bg-green-600 text-white font-medium ${unscannedFiles.length === 0 || autoScanning || activelyScanningBatches.size > 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-green-700'}`}
                  >{autoScanning ? 'Scanning All...' : 'Scan All Batches'}</button>
                </>
              )}
            </div>
          </div>
        </div>

        {/* Completion message */}
        {showCompletionMessage && (
          <div className="bg-green-900 border border-green-700 rounded-lg p-4 mb-8">
            <div className="flex items-center">
              <FiCheckCircle className="h-5 w-5 text-green-400 mr-2" />
              <p className="text-green-200">
                🎉 Scan completed! All {selectedFiles.length} files have been analyzed.
                Found {calculatedTotal} total vulnerabilities.
              </p>
            </div>
          </div>
        )}

        {/* Error message */}
        {error && (
          <div className="bg-red-900 border border-red-700 rounded-lg p-4 mb-8">
            <div className="flex items-center">
              <FiAlertCircle className="h-5 w-5 text-red-400 mr-2" />
              <p className="text-red-200">{error}</p>
            </div>
          </div>
        )}

        {/* 3-panel layout only if results exist */}
        {allResults.length > 0 && (
          <>
            <div className="grid grid-cols-5 gap-4 mb-6">
              <div className="bg-red-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-red-200">
                  {highCount}
                </div>
                <div className="text-sm text-red-200">High Severity</div>
              </div>
              <div className="bg-orange-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-orange-200">
                  {mediumCount}
                </div>
                <div className="text-sm text-orange-200">Medium Severity</div>
              </div>
              <div className="bg-yellow-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-yellow-200">
                  {lowCount}
                </div>
                <div className="text-sm text-yellow-200">Low Severity</div>
              </div>
              <div className="bg-blue-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-blue-200">
                  {infoCount}
                </div>
                <div className="text-sm text-blue-200">Informational</div>
              </div>
              <div className="bg-gray-700 p-4 rounded-lg">
                <div className="text-2xl font-bold text-gray-200">
                  {totalCount}
                </div>
                <div className="text-sm text-gray-200">Total Issues</div>
              </div>
            </div>
            <div className="flex flex-1 min-h-0 rounded-lg overflow-hidden border border-gray-800 bg-gray-800" style={{ minHeight: 400 }}>
              {/* Sidebar: File Tree */}
              <div style={{ width: sidebarWidth }} className="bg-gray-900 border-r border-gray-800 flex flex-col overflow-y-auto relative">
                <div className="p-3 text-xs text-gray-400 uppercase tracking-wider">
                  All Files ({scannedFiles.length} scanned / {selectedFiles.length} total)
                </div>
                <div className="flex-1 overflow-y-auto">
                  {/* Show ALL vulnerable files */}
                  {Object.keys(normalizedFileVulns).length > 0 && (
                    <div className="mb-4">
                      <div className="px-3 py-2 text-xs text-red-400 font-semibold bg-red-900/20">
                        🚨 VULNERABLE FILES ({(() => {
                          // Count unique base file names
                          const uniqueFiles = new Set();
                          Object.keys(normalizedFileVulns).forEach(vulnFileName => {
                            const baseFileName = vulnFileName.split(':')[0];
                            uniqueFiles.add(baseFileName);
                          });
                          return uniqueFiles.size;
                        })()})
                      </div>
                      {(() => {
                        // Group vulnerabilities by actual file name to avoid duplicates
                        const fileGroups: Record<string, any[]> = {};

                        Object.entries(normalizedFileVulns).forEach(([vulnFileName, vulns]) => {
                          // Extract the base file name (remove things like ":dependencies.bcrypt-nodejs")
                          const baseFileName = vulnFileName.split(':')[0];

                          if (!fileGroups[baseFileName]) {
                            fileGroups[baseFileName] = [];
                          }
                          fileGroups[baseFileName].push(...vulns);
                        });

                        return Object.entries(fileGroups).map(([fileName, vulns]) => {
                          // Find the actual file in selectedFiles to ensure we have the content
                          const actualFile = selectedFiles.find(f =>
                            f.name === fileName ||
                            f.name.endsWith(fileName.split('/').pop() || fileName) ||
                            f.name.includes(fileName) ||
                            fileName.includes(f.name)
                          );

                          // Group vulnerabilities by severity for this file
                          const fileVulnsBySeverity = vulns.reduce((acc, vuln) => {
                            const severity = vuln.severity?.toLowerCase().trim();
                            if (severity) {
                              if (!acc[severity]) acc[severity] = 0;
                              acc[severity]++;
                            }
                            return acc;
                          }, {} as Record<string, number>);

                          return (
                            <button
                              key={fileName}
                              className={`w-full flex items-center px-4 py-2 text-left rounded transition-colors duration-100 bg-red-900/60 text-red-200 font-bold hover:bg-red-900/80 ${selectedFile === fileName ? 'ring-2 ring-red-400' : ''}`}
                              onClick={() => setSelectedFile(fileName)}
                            >
                              <FiFile className="mr-2" />
                              <span className="truncate flex-1">{fileName}</span>
                              <div className="flex items-center space-x-1">
                                {/* Show colored circles for each severity with tooltips */}
                                {fileVulnsBySeverity.critical > 0 && (
                                  <span
                                    className="w-5 h-5 bg-purple-600 text-white rounded-full flex items-center justify-center text-xs font-bold cursor-help"
                                    title={`${fileVulnsBySeverity.critical} Critical severity vulnerability${fileVulnsBySeverity.critical > 1 ? 'ies' : ''}`}
                                  >
                                    {fileVulnsBySeverity.critical}
                                  </span>
                                )}
                                {fileVulnsBySeverity.high > 0 && (
                                  <span
                                    className="w-5 h-5 bg-red-600 text-white rounded-full flex items-center justify-center text-xs font-bold cursor-help"
                                    title={`${fileVulnsBySeverity.high} High severity vulnerability${fileVulnsBySeverity.high > 1 ? 'ies' : ''}`}
                                  >
                                    {fileVulnsBySeverity.high}
                                  </span>
                                )}
                                {fileVulnsBySeverity.medium > 0 && (
                                  <span
                                    className="w-5 h-5 bg-orange-500 text-white rounded-full flex items-center justify-center text-xs font-bold cursor-help"
                                    title={`${fileVulnsBySeverity.medium} Medium severity vulnerability${fileVulnsBySeverity.medium > 1 ? 'ies' : ''}`}
                                  >
                                    {fileVulnsBySeverity.medium}
                                  </span>
                                )}
                                {fileVulnsBySeverity.low > 0 && (
                                  <span
                                    className="w-5 h-5 bg-gray-500 text-white rounded-full flex items-center justify-center text-xs font-bold cursor-help"
                                    title={`${fileVulnsBySeverity.low} Low severity vulnerability${fileVulnsBySeverity.low > 1 ? 'ies' : ''}`}
                                  >
                                    {fileVulnsBySeverity.low}
                                  </span>
                                )}
                                {fileVulnsBySeverity.info > 0 && (
                                  <span
                                    className="w-5 h-5 bg-blue-600 text-white rounded-full flex items-center justify-center text-xs font-bold cursor-help"
                                    title={`${fileVulnsBySeverity.info} Informational issue${fileVulnsBySeverity.info > 1 ? 's' : ''}`}
                                  >
                                    {fileVulnsBySeverity.info}
                                  </span>
                                )}
                                {!actualFile && (
                                  <span
                                    className="text-xs bg-yellow-600 text-white rounded px-1 py-0.5 cursor-help"
                                    title="File content not available - may not be loaded or was filtered out"
                                  >
                                    !
                                  </span>
                                )}
                              </div>
                            </button>
                          );
                        });
                      })()}
                    </div>
                  )}

                  {/* Show ALL clean files - only files that are scanned but have NO vulnerabilities */}
                  {(() => {
                    const cleanFiles = scannedFiles.filter(f => !Object.keys(normalizedFileVulns).includes(f));
                    return cleanFiles.length > 0 && (
                      <div className="mb-4">
                        <div className="px-3 py-2 text-xs text-green-400 font-semibold bg-green-900/20">
                          ✅ CLEAN FILES ({cleanFiles.length})
                        </div>
                        {cleanFiles.map(fileName => (
                          <button
                            key={fileName}
                            className={`w-full flex items-center px-4 py-2 text-left rounded transition-colors duration-100 bg-green-900/60 text-green-200 font-bold hover:bg-green-900/80 ${selectedFile === fileName ? 'ring-2 ring-green-400' : ''}`}
                            onClick={() => setSelectedFile(fileName)}
                          >
                            <FiFile className="mr-2" />
                            <span className="truncate flex-1">{fileName}</span>
                            <span className="ml-2 text-xs bg-green-700 text-white rounded px-2 py-0.5">clean</span>
                          </button>
                        ))}
                      </div>
                    );
                  })()}

                  {/* Show unscanned files from current batch */}
                  {unscannedInCurrentBatch.length > 0 && (
                    <div>
                      <div className="px-3 py-2 text-xs text-gray-400 font-semibold bg-gray-800/20">
                        ⏳ NOT SCANNED ({unscannedInCurrentBatch.length})
                      </div>
                      {unscannedInCurrentBatch.map(file => (
                        <button
                          key={file.name}
                          className={`w-full flex items-center px-4 py-2 text-left rounded transition-colors duration-100 text-gray-500 italic hover:bg-gray-800 ${selectedFile === file.name ? 'ring-2 ring-gray-400' : ''}`}
                          onClick={() => setSelectedFile(file.name)}
                        >
                          <FiFile className="mr-2" />
                          <span className="truncate flex-1">{file.name}</span>
                          <span className="ml-2 text-xs bg-gray-700 text-gray-300 rounded px-2 py-0.5">not scanned</span>
                        </button>
                      ))}
                    </div>
                  )}
                </div>
                {/* Sidebar resizer */}
                <div
                  className="absolute top-0 right-0 h-full w-2 cursor-col-resize z-10"
                  onMouseDown={startSidebarResize}
                  style={{ userSelect: 'none' }}
                />
              </div>
              {/* Center: Code Viewer */}
              <div style={{ flex: 1, minWidth: 0 }} className="bg-gray-950 p-0 overflow-auto flex flex-col">
                <div className="p-3 text-xs text-gray-400 border-b border-gray-800">
                  {selectedFile || 'Select a file'}
                  {selectedFile && !selectedFileContent && (
                    <span className="ml-2 text-yellow-400">(file content not available - may not be loaded)</span>
                  )}
                </div>
                <div className="flex-1 overflow-auto">
                  {selectedFileContent ? (
                    <div className="relative">
                      <SyntaxHighlighter
                        language={selectedFile?.split('.').pop() || 'javascript'}
                        style={vscDarkPlus}
                        customStyle={{ background: 'transparent', margin: 0, padding: 16, fontSize: 14, paddingLeft: 60 }}
                        showLineNumbers
                        wrapLines
                        lineProps={(lineNumber: number) => {
                          // Simple line highlighting for files with vulnerabilities
                          if (selectedFileVulns.length === 0) return {};

                          // Light red background for the entire file if it has vulnerabilities
                          return {
                            style: {
                              backgroundColor: 'rgba(239, 68, 68, 0.1)', // Very light red background
                            }
                          };
                        }}
                      >
                        {selectedFileContent}
                      </SyntaxHighlighter>


                    </div>
                  ) : (
                    <div className="p-8 text-gray-500 text-center">
                      {selectedFile ?
                        `File "${selectedFile}" content not available. This may happen if the file wasn't included in the uploaded folder or was filtered out.` :
                        'Select a file from the sidebar to view its code and vulnerabilities.'
                      }
                    </div>
                  )}
                </div>
              </div>
              {/* Right: Vulnerability Details */}
              <div style={{ width: rightPanelWidth }} className="bg-gray-900 border-l border-gray-800 flex flex-col overflow-y-auto relative">
                <div className="p-3 text-xs text-gray-400 uppercase tracking-wider">Vulnerabilities</div>
                <div className="flex-1 overflow-y-auto">
                  {selectedFileVulns.length === 0 ? (
                    <div className="p-4 text-gray-500">No vulnerabilities for this file.</div>
                  ) : (
                    <div className="space-y-4 p-4">
                      {selectedFileVulns.map((vuln, idx) => {
                        // Extract line number from location if available
                        const locationMatch = vuln.location.match(/line (\d+)/i);
                        const lineNumber = locationMatch ? parseInt(locationMatch[1]) : null;

                        // Try to extract the problematic code line
                        let codeLine = '';
                        if (lineNumber && selectedFileContent) {
                          const lines = selectedFileContent.split('\n');
                          if (lineNumber <= lines.length) {
                            codeLine = lines[lineNumber - 1]?.trim() || '';
                          }
                        }

                        return (
                          <div key={idx} className="bg-gray-800 border-l-4 border-red-500 rounded-lg overflow-hidden">
                            {/* Header */}
                            <div className="bg-gray-750 px-4 py-3 border-b border-gray-700">
                              <div className="flex items-center justify-between mb-2">
                                <div className="flex items-center">
                                  <FiAlertTriangle className={`${getSeverityColor(vuln.severity)} mr-2`} />
                                  <span className={`font-bold text-sm ${getSeverityColor(vuln.severity)}`}>
                                    {vuln.severity.toUpperCase()}
                                  </span>
                                  <span className={`ml-3 px-2 py-1 rounded-full text-xs font-medium ${getTypeColor(vuln.type)}`}>
                                    {vuln.type.toUpperCase()}
                                  </span>
                                </div>
                                {vuln.cwe && (
                                  <a
                                    href={`https://cwe.mitre.org/data/definitions/${vuln.cwe.replace('CWE-', '')}.html`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-blue-400 hover:text-blue-200 text-xs flex items-center"
                                  >
                                    {vuln.cwe} <FiExternalLink className="ml-1" />
                                  </a>
                                )}
                              </div>
                              <h3 className="text-white font-medium">{vuln.description}</h3>
                              <p className="text-gray-400 text-sm mt-1">{vuln.location}</p>
                            </div>

                            {/* Code snippet if available */}
                            {codeLine && (
                              <div className="bg-gray-900 px-4 py-3 border-b border-gray-700">
                                <div className="text-xs text-gray-400 mb-1">Problematic code:</div>
                                <div className="bg-red-900/20 border border-red-700/50 rounded px-3 py-2">
                                  <code className="text-red-200 text-sm font-mono">{codeLine}</code>
                                </div>
                                {lineNumber && (
                                  <div className="text-xs text-gray-500 mt-1">Line {lineNumber}</div>
                                )}
                              </div>
                            )}

                            {/* Recommendation */}
                            <div className="px-4 py-3">
                              <div className="text-xs text-gray-400 mb-2 font-semibold uppercase tracking-wider">
                                💡 Recommendation
                              </div>
                              <div className="text-gray-200 text-sm leading-relaxed bg-blue-900/20 border border-blue-700/30 rounded px-3 py-2">
                                {vuln.recommendation}
                              </div>
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  )}
                </div>
                {/* Right panel resizer */}
                <div
                  className="absolute top-0 left-0 h-full w-2 cursor-col-resize z-10"
                  onMouseDown={startRightPanelResize}
                  style={{ userSelect: 'none' }}
                />
              </div>
            </div>
          </>
        )}

        {failedBatches.length > 0 && (
          <div className="text-xs text-red-400 mt-2">Failed batches: {failedBatches.map(b => b + 1).join(', ')}</div>
        )}
      </div>
    </div>
  )
}

