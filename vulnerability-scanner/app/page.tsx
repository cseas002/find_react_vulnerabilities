'use client'

import { useState, useRef } from 'react'
import { FiAlertCircle, FiCheckCircle, FiFolder, FiFile, FiChevronDown, FiChevronRight, FiExternalLink, FiAlertTriangle } from 'react-icons/fi'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { vscDarkPlus } from 'react-syntax-highlighter/dist/cjs/styles/prism'

type ScanResult = {
  vulnerabilities: Array<{
    severity: string
    type: string
    description: string
    location: string
    recommendation: string
    cwe?: string
  }>
}

interface DirectoryInputElement extends HTMLInputElement {
  webkitdirectory: boolean
}

type FileContent = {
  name: string
  content: string
}

// Priority order for files
const FILE_PRIORITY: Record<string, number> = {
  'package.json': 1,
  'package-lock.json': 2,
  'yarn.lock': 2,
  'tsconfig.json': 3,
  '.env': 4,
  'next.config.js': 5,
  'vite.config.js': 5,
  'webpack.config.js': 5,
  '.eslintrc': 6,
  '.prettierrc': 6,
}

// Rough estimation of tokens (4 characters â‰ˆ 1 token)
const MAX_FILE_SIZE = 50 * 1024 // 50KB
const MAX_FILES = 10 // Maximum number of files to process
const MAX_TOTAL_TOKENS = 100000 // Leave some room for the prompt and response

// Rough token estimation
function estimateTokens(text: string): number {
  return Math.ceil(text.length / 4)
}

// Helper function to get severity color
function getSeverityColor(severity: string) {
  switch (severity.toLowerCase()) {
    case 'high':
      return 'text-red-600'
    case 'medium':
      return 'text-orange-500'
    case 'low':
      return 'text-yellow-500'
    default:
      return 'text-gray-500'
  }
}

// Helper function to get type color
function getTypeColor(type: string) {
  switch (type.toLowerCase()) {
    case 'xss':
      return 'bg-red-100 text-red-800'
    case 'injection':
      return 'bg-orange-100 text-orange-800'
    case 'auth':
      return 'bg-purple-100 text-purple-800'
    case 'config':
      return 'bg-blue-100 text-blue-800'
    case 'logic':
      return 'bg-green-100 text-green-800'
    default:
      return 'bg-gray-100 text-gray-800'
  }
}

// Helper to get highest severity for a file
function getFileSeverity(file: string, fileVulns: Record<string, any>, allResults: any[]) {
  const vulns = fileVulns[file] || [];
  if (vulns.some((v: any) => v.severity === 'high')) return 'high';
  if (vulns.some((v: any) => v.severity === 'medium')) return 'medium';
  if (vulns.some((v: any) => v.severity === 'low')) return 'low';
  return null;
}

// Sidebar status logic
function getFileStatus(file: string, scannedFiles: string[], allResults: any[]): string {
  if (scannedFiles.includes(file)) {
    const vulns = allResults.flatMap((r: any) => r?.vulnerabilities || []).filter((v: any) => v.location.split('(')[0].trim() === file);
    if (vulns.length > 0) return 'vulnerable';
    return 'clean';
  }
  return 'not scanned';
}

function fileHighlightClass(file: string, fileVulns: Record<string, any>, allResults: any[], scannedFiles: string[]) {
  const status = getFileStatus(file, scannedFiles, allResults);
  if (status === 'vulnerable') return 'bg-red-900/60 text-red-200 font-bold';
  if (status === 'clean') return 'bg-green-900/60 text-green-200 font-bold';
  if (status === 'not scanned') return 'text-gray-500 italic';
  return 'text-gray-300 hover:bg-gray-800';
}

// Component for displaying a file tree
function FileTree({ vulnerabilities }: { vulnerabilities: ScanResult['vulnerabilities'] }) {
  const [expandedFiles, setExpandedFiles] = useState<Record<string, boolean>>({})
  const [expandedVulns, setExpandedVulns] = useState<Record<string, boolean>>({})

  // Group vulnerabilities by file
  const fileGroups = vulnerabilities.reduce((acc, vuln) => {
    const file = vuln.location.split('(')[0].trim()
    if (!acc[file]) {
      acc[file] = []
    }
    acc[file].push(vuln)
    return acc
  }, {} as Record<string, typeof vulnerabilities>)

  const toggleFile = (file: string) => {
    setExpandedFiles(prev => ({
      ...prev,
      [file]: !prev[file]
    }))
  }

  const toggleVuln = (id: string) => {
    setExpandedVulns(prev => ({
      ...prev,
      [id]: !prev[id]
    }))
  }

  return (
    <div className="mt-4 space-y-2">
      {Object.entries(fileGroups).map(([file, vulns]) => (
        <div key={file} className="border rounded-lg overflow-hidden">
          <button
            onClick={() => toggleFile(file)}
            className="w-full px-4 py-2 bg-gray-50 hover:bg-gray-100 flex items-center justify-between"
          >
            <div className="flex items-center space-x-2">
              {expandedFiles[file] ? <FiChevronDown /> : <FiChevronRight />}
              <FiFile className="text-gray-500" />
              <span className="font-medium">{file}</span>
            </div>
            <span className="text-sm text-gray-500">{vulns.length} issues</span>
          </button>

          {expandedFiles[file] && (
            <div className="p-4 space-y-4">
              {vulns.map((vuln, index) => (
                <div key={`${file}-${index}`} className="border-l-4 border-red-500 pl-4">
                  <button
                    onClick={() => toggleVuln(`${file}-${index}`)}
                    className="w-full text-left"
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        {expandedVulns[`${file}-${index}`] ? <FiChevronDown /> : <FiChevronRight />}
                        <FiAlertTriangle className={getSeverityColor(vuln.severity)} />
                        <span className="font-medium">{vuln.description}</span>
                      </div>
                      <span className={`px-2 py-1 rounded-full text-xs ${getTypeColor(vuln.type)}`}>
                        {vuln.type}
                      </span>
                    </div>
                  </button>

                  {expandedVulns[`${file}-${index}`] && (
                    <div className="mt-2 space-y-2 text-sm">
                      <p><strong>Severity:</strong> <span className={getSeverityColor(vuln.severity)}>{vuln.severity}</span></p>
                      <p><strong>Location:</strong> {vuln.location}</p>
                      <p><strong>Recommendation:</strong> {vuln.recommendation}</p>
                      {vuln.cwe && (
                        <p>
                          <strong>CWE:</strong>{' '}
                          <a
                            href={`https://cwe.mitre.org/data/definitions/${vuln.cwe.replace('CWE-', '')}.html`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
                          >
                            <span>{vuln.cwe}</span>
                            <FiExternalLink className="inline" />
                          </a>
                        </p>
                      )}
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </div>
  )
}

const BATCH_SIZE = 10;

export default function Home() {
  const [selectedFiles, setSelectedFiles] = useState<FileContent[]>([])
  const [projectType, setProjectType] = useState<'react' | 'vue' | 'node'>('react')
  const [scanning, setScanning] = useState(false)
  const [currentBatch, setCurrentBatch] = useState(0);
  const [allResults, setAllResults] = useState<ScanResult[]>([]);
  const [error, setError] = useState<string | null>(null)
  const [selectedFile, setSelectedFile] = useState<string | null>(null)
  const [sidebarWidth, setSidebarWidth] = useState(260);
  const [rightPanelWidth, setRightPanelWidth] = useState(380);
  const resizingSidebar = useRef(false);
  const resizingRightPanel = useRef(false);
  const [scannedFiles, setScannedFiles] = useState<string[]>([]);
  const [autoScanning, setAutoScanning] = useState(false);

  // Files left to scan
  const unscannedFiles = selectedFiles.filter(f => !scannedFiles.includes(f.name));
  const totalBatches = Math.ceil(unscannedFiles.length / BATCH_SIZE);
  const batchFiles = unscannedFiles.slice(currentBatch * BATCH_SIZE, (currentBatch + 1) * BATCH_SIZE);
  const results = allResults[currentBatch] || null;

  // Map vulnerabilities by file for all scanned batches
  const allVulns = allResults.flatMap(r => r?.vulnerabilities || []);
  const fileVulns = allVulns.reduce((acc, vuln) => {
    const file = vuln.location.split('(')[0].trim();
    if (!acc[file]) acc[file] = [];
    acc[file].push(vuln);
    return acc;
  }, {} as Record<string, typeof allVulns>);

  // All files in the project (from uploaded folder)
  const allFiles = selectedFiles.map(f => f.name);
  // Add any files from vulnerabilities not in selectedFiles (for completeness)
  Object.keys(fileVulns).forEach(f => {
    if (!allFiles.includes(f)) allFiles.push(f);
  });

  // Get code for selected file
  const selectedFileContent = selectedFiles.find(f => f.name === selectedFile)?.content || '';
  const selectedFileVulns = selectedFile && fileVulns[selectedFile] ? fileVulns[selectedFile] : [];

  // Resizing handlers
  function onMouseMove(e: MouseEvent) {
    if (resizingSidebar.current) {
      setSidebarWidth(Math.max(160, Math.min(e.clientX - 32, 500)));
    } else if (resizingRightPanel.current) {
      setRightPanelWidth(Math.max(260, Math.min(window.innerWidth - e.clientX - 32, 600)));
    }
  }
  function onMouseUp() {
    resizingSidebar.current = false;
    resizingRightPanel.current = false;
    window.removeEventListener('mousemove', onMouseMove);
    window.removeEventListener('mouseup', onMouseUp);
  }
  function startSidebarResize() {
    resizingSidebar.current = true;
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
  }
  function startRightPanelResize() {
    resizingRightPanel.current = true;
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
  }

  const handleFolderSelect = async (event: React.ChangeEvent<DirectoryInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    const fileContents: FileContent[] = [];
    const excludedDirs = ['node_modules', '.git', 'dist', 'build', '.next'];
    const textExtensions = [
      '.js', '.jsx', '.ts', '.tsx', '.json', '.html', '.css', '.scss',
      '.md', '.txt', '.yml', '.yaml', '.env', '.config.js'
    ]

    // First pass: collect all valid files
    const validFiles: Array<{ file: File, priority: number }> = []

    for (const file of Array.from(files)) {
      const path = file.webkitRelativePath
      const parts = path.split('/')

      // Skip files in excluded directories
      if (excludedDirs.some(dir => parts.includes(dir))) continue

      // Only process text files
      const ext = path.split('.').pop()?.toLowerCase()
      if (!ext || !textExtensions.includes(`.${ext}`)) continue

      // Calculate priority
      const fileName = parts[parts.length - 1]
      const priority = FILE_PRIORITY[fileName] || 999 // Default low priority

      validFiles.push({ file, priority })
    }

    // Sort by priority
    validFiles.sort((a, b) => a.priority - b.priority)

    // Process files while staying under token limit
    let totalTokens = 0
    for (const { file } of validFiles) {
      if (fileContents.length >= MAX_FILES) break

      try {
        const content = await file.text()
        const estimatedTokens = estimateTokens(content)

        // Skip if this file would put us over the limit
        if (totalTokens + estimatedTokens > MAX_TOTAL_TOKENS) {
          console.log(`Skipping ${file.webkitRelativePath} - would exceed token limit`)
          continue
        }

        // Truncate content if too large
        let finalContent = content
        if (content.length > MAX_FILE_SIZE) {
          finalContent = content.slice(0, MAX_FILE_SIZE) + '\n... (content truncated)'
        }

        fileContents.push({
          name: file.webkitRelativePath,
          content: finalContent
        })

        totalTokens += estimateTokens(finalContent)
      } catch (err) {
        console.error(`Error reading file ${file.webkitRelativePath}:`, err)
      }
    }

    setSelectedFiles(fileContents)
  }

  // Scan a single batch
  const handleScan = async () => {
    if (batchFiles.length === 0) return;
    setScanning(true);
    setError(null);
    try {
      const response = await fetch('/api/scan', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ files: batchFiles, projectType }),
      });
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to scan project');
      }
      const data = await response.json();
      setAllResults(prev => {
        const updated = [...prev];
        updated[currentBatch] = data;
        return updated;
      });
      setScannedFiles(prev => [...prev, ...batchFiles.map(f => f.name)]);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to scan project. Please try again.');
    } finally {
      setScanning(false);
    }
  };

  // Scan all batches
  const handleScanAll = async () => {
    setAutoScanning(true);
    setCurrentBatch(0);
    let batchIdx = 0;
    let filesLeft = selectedFiles.filter(f => !scannedFiles.includes(f.name));
    let resultsArr = [...allResults];
    let scanned = [...scannedFiles];
    while (filesLeft.length > 0) {
      const batch = filesLeft.slice(0, BATCH_SIZE);
      try {
        const response = await fetch('/api/scan', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ files: batch, projectType }),
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to scan project');
        }
        const data = await response.json();
        resultsArr[batchIdx] = data;
        scanned = [...scanned, ...batch.map(f => f.name)];
        setAllResults([...resultsArr]);
        setScannedFiles([...scanned]);
        setCurrentBatch(batchIdx);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to scan project. Please try again.');
        break;
      }
      batchIdx++;
      filesLeft = selectedFiles.filter(f => !scanned.includes(f.name));
      await new Promise(res => setTimeout(res, 500)); // Small delay for UI update
    }
    setAutoScanning(false);
  };

  // Responsive 3-panel layout
  return (
    <div className="min-h-screen bg-gray-900 flex flex-col">
      <div className="max-w-7xl mx-auto w-full px-4 py-8 flex-1 flex flex-col">
        <h1 className="text-3xl font-bold text-gray-100 mb-8">Project Vulnerability Scanner</h1>

        {/* Always show upload/scan controls */}
        <div className="bg-gray-800 rounded-lg shadow-md p-6 mb-8">
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Project Type
            </label>
            <select
              value={projectType}
              onChange={(e) => setProjectType(e.target.value as any)}
              className="w-full p-2 border border-gray-700 rounded-md bg-gray-900 text-gray-100"
            >
              <option value="react">React</option>
              <option value="vue">Vue</option>
              <option value="node">Node.js</option>
            </select>
          </div>

          <div className="border-2 border-dashed rounded-lg p-8 text-center border-gray-700 bg-gray-900">
            <input
              type="file"
              // @ts-ignore
              webkitdirectory="true"
              onChange={handleFolderSelect}
              className="hidden"
              id="folder-input"
            />
            <label
              htmlFor="folder-input"
              className="cursor-pointer block"
            >
              <FiFolder className="mx-auto h-12 w-12 text-gray-500" />
              <p className="mt-2 text-sm text-gray-300">
                {selectedFiles.length > 0
                  ? `${selectedFiles.length} files selected (top ${MAX_FILES} most relevant)`
                  : 'Click to select your project folder'}
              </p>
              <p className="mt-1 text-xs text-gray-400">
                (node_modules, .git, and other excluded directories will be ignored)
              </p>
            </label>
          </div>

          {selectedFiles.length > 0 && (
            <div className="mt-4">
              <h3 className="text-sm font-medium text-gray-300 mb-2">Selected Files:</h3>
              <ul className="text-sm text-gray-300 space-y-1 max-h-40 overflow-y-auto">
                {selectedFiles.map((file, index) => (
                  <li key={index} className="truncate">
                    {file.name}
                    {file.content.length > MAX_FILE_SIZE && (
                      <span className="text-yellow-400 ml-2">(truncated)</span>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className="flex justify-between items-center mt-6">
            <div>
              <span className="text-gray-400 text-sm">Batch {unscannedFiles.length > 0 ? currentBatch + 1 : 0} of {unscannedFiles.length > 0 ? totalBatches : 0}</span>
            </div>
            <div className="space-x-2">
              <button
                onClick={() => setCurrentBatch(b => Math.max(0, b - 1))}
                disabled={currentBatch === 0 || unscannedFiles.length === 0}
                className={`py-1 px-3 rounded bg-gray-700 text-gray-200 ${currentBatch === 0 || unscannedFiles.length === 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-600'}`}
              >Previous</button>
              <button
                onClick={() => setCurrentBatch(b => Math.min(totalBatches - 1, b + 1))}
                disabled={currentBatch === totalBatches - 1 || unscannedFiles.length === 0}
                className={`py-1 px-3 rounded bg-gray-700 text-gray-200 ${currentBatch === totalBatches - 1 || unscannedFiles.length === 0 ? 'opacity-50 cursor-not-allowed' : 'hover:bg-gray-600'}`}
              >Next</button>
              <button
                onClick={handleScan}
                disabled={batchFiles.length === 0 || scanning || autoScanning}
                className={`py-1 px-3 rounded bg-blue-600 text-white font-medium ${batchFiles.length === 0 || scanning || autoScanning ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-700'}`}
              >{scanning ? 'Scanning...' : 'Scan This Batch'}</button>
              <button
                onClick={handleScanAll}
                disabled={unscannedFiles.length === 0 || scanning || autoScanning}
                className={`py-1 px-3 rounded bg-green-600 text-white font-medium ${unscannedFiles.length === 0 || scanning || autoScanning ? 'opacity-50 cursor-not-allowed' : 'hover:bg-green-700'}`}
              >{autoScanning ? 'Scanning All...' : 'Scan All Batches'}</button>
            </div>
          </div>
        </div>

        {/* Error message */}
        {error && (
          <div className="bg-red-900 border border-red-700 rounded-lg p-4 mb-8">
            <div className="flex items-center">
              <FiAlertCircle className="h-5 w-5 text-red-400 mr-2" />
              <p className="text-red-200">{error}</p>
            </div>
          </div>
        )}

        {/* 3-panel layout only if results exist */}
        {allResults.length > 0 && (
          <>
            <div className="grid grid-cols-4 gap-4 mb-6">
              <div className="bg-red-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-red-200">
                  {allResults.filter(r => r.vulnerabilities.some(v => v.severity === 'high')).length}
                </div>
                <div className="text-sm text-red-200">High Severity</div>
              </div>
              <div className="bg-orange-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-orange-200">
                  {allResults.filter(r => r.vulnerabilities.some(v => v.severity === 'medium')).length}
                </div>
                <div className="text-sm text-orange-200">Medium Severity</div>
              </div>
              <div className="bg-yellow-900 p-4 rounded-lg">
                <div className="text-2xl font-bold text-yellow-200">
                  {allResults.filter(r => r.vulnerabilities.some(v => v.severity === 'low')).length}
                </div>
                <div className="text-sm text-yellow-200">Low Severity</div>
              </div>
              <div className="bg-gray-700 p-4 rounded-lg">
                <div className="text-2xl font-bold text-gray-200">
                  {allResults.flatMap(r => r.vulnerabilities).length}
                </div>
                <div className="text-sm text-gray-200">Total Issues</div>
              </div>
            </div>
            <div className="flex flex-1 min-h-0 rounded-lg overflow-hidden border border-gray-800 bg-gray-800" style={{ minHeight: 400 }}>
              {/* Sidebar: File Tree */}
              <div style={{ width: sidebarWidth }} className="bg-gray-900 border-r border-gray-800 flex flex-col overflow-y-auto relative">
                <div className="p-3 text-xs text-gray-400 uppercase tracking-wider">Files</div>
                <ul className="flex-1">
                  {selectedFiles.map(f => (
                    <li key={f.name}>
                      <button
                        className={`w-full flex items-center px-4 py-2 text-left rounded transition-colors duration-100 ${fileHighlightClass(f.name, fileVulns, allResults, scannedFiles)} ${selectedFile === f.name ? 'bg-blue-900/80 ring-2 ring-blue-400' : ''}`}
                        onClick={() => setSelectedFile(f.name)}
                      >
                        <FiFile className="mr-2" />
                        <span className="truncate flex-1">{f.name}</span>
                        {getFileStatus(f.name, scannedFiles, allResults) === 'vulnerable' && (
                          <span className="ml-2 text-xs bg-red-700 text-white rounded px-2 py-0.5">vuln</span>
                        )}
                        {getFileStatus(f.name, scannedFiles, allResults) === 'clean' && (
                          <span className="ml-2 text-xs bg-green-700 text-white rounded px-2 py-0.5">clean</span>
                        )}
                        {getFileStatus(f.name, scannedFiles, allResults) === 'not scanned' && (
                          <span className="ml-2 text-xs bg-gray-700 text-gray-300 rounded px-2 py-0.5">not scanned</span>
                        )}
                      </button>
                    </li>
                  ))}
                </ul>
                {/* Sidebar resizer */}
                <div
                  className="absolute top-0 right-0 h-full w-2 cursor-col-resize z-10"
                  onMouseDown={startSidebarResize}
                  style={{ userSelect: 'none' }}
                />
              </div>
              {/* Center: Code Viewer */}
              <div style={{ flex: 1, minWidth: 0 }} className="bg-gray-950 p-0 overflow-auto flex flex-col">
                <div className="p-3 text-xs text-gray-400 border-b border-gray-800">{selectedFile || 'Select a file'}</div>
                <div className="flex-1 overflow-auto">
                  {selectedFileContent ? (
                    <SyntaxHighlighter
                      language={selectedFile?.split('.').pop() || 'javascript'}
                      style={vscDarkPlus}
                      customStyle={{ background: 'transparent', margin: 0, padding: 16, fontSize: 14 }}
                      showLineNumbers
                      wrapLines
                      lineProps={(lineNumber: number) => {
                        const sev = getFileSeverity(selectedFile || '', fileVulns, allResults);
                        return {
                          style: sev === 'high' ? { background: 'rgba(239,68,68,0.15)' } : undefined
                        };
                      }}
                    >
                      {selectedFileContent}
                    </SyntaxHighlighter>
                  ) : (
                    <div className="p-8 text-gray-500 text-center">No file selected or file not loaded.</div>
                  )}
                </div>
              </div>
              {/* Right: Vulnerability Details */}
              <div style={{ width: rightPanelWidth }} className="bg-gray-900 border-l border-gray-800 flex flex-col overflow-y-auto relative">
                <div className="p-3 text-xs text-gray-400 uppercase tracking-wider">Vulnerabilities</div>
                <div className="flex-1 overflow-y-auto">
                  {selectedFileVulns.length === 0 ? (
                    <div className="p-4 text-gray-500">No vulnerabilities for this file.</div>
                  ) : (
                    <ul className="space-y-4 p-4">
                      {selectedFileVulns.map((vuln, idx) => (
                        <li key={idx} className="bg-gray-800 border-l-4 pl-4 rounded border-red-700">
                          <div className="flex items-center mb-1">
                            <FiAlertTriangle className={getSeverityColor(vuln.severity)} />
                            <span className={`ml-2 font-semibold ${getSeverityColor(vuln.severity)}`}>{vuln.severity.toUpperCase()}</span>
                            <span className={`ml-3 px-2 py-0.5 rounded-full text-xs ${getTypeColor(vuln.type)}`}>{vuln.type}</span>
                          </div>
                          <div className="text-gray-100 font-medium mb-1">{vuln.description}</div>
                          <div className="text-gray-400 text-xs mb-1">{vuln.location}</div>
                          <div className="text-gray-300 text-sm mb-1"><strong>Recommendation:</strong> {vuln.recommendation}</div>
                          {vuln.cwe && (
                            <div className="text-xs mt-1">
                              <strong>CWE:</strong>{' '}
                              <a
                                href={`https://cwe.mitre.org/data/definitions/${vuln.cwe.replace('CWE-', '')}.html`}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-blue-400 hover:text-blue-200 underline"
                              >
                                {vuln.cwe}
                              </a>
                            </div>
                          )}
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
                {/* Right panel resizer */}
                <div
                  className="absolute top-0 left-0 h-full w-2 cursor-col-resize z-10"
                  onMouseDown={startRightPanelResize}
                  style={{ userSelect: 'none' }}
                />
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  )
}
