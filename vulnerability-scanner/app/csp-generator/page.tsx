'use client';

import { useState } from 'react';
import Link from 'next/link';
import { FiArrowLeft, FiTerminal, FiAlertTriangle, FiCheckCircle } from 'react-icons/fi';

// Helper function to convert ANSI escape codes to HTML
function ansiToHtml(text: string): string {
    if (!text) return '';

    // Map ANSI codes to CSS styles
    // Basic SGR parameters: 0 (reset), 1 (bold), 4 (underline), 30-37 (foreground), 90-97 (bright foreground)
    // 40-47 (background), 100-107 (bright background)
    const colorMap: { [key: string]: string | null } = {
        // Text colors
        '30': 'color:black;',          // Black
        '31': 'color:red;',            // Red
        '32': 'color:green;',          // Green
        '33': 'color:darkorange;',     // Yellow (using darkorange for better visibility on light backgrounds if pre is not dark)
        '34': 'color:blue;',           // Blue
        '35': 'color:magenta;',        // Magenta
        '36': 'color:cyan;',            // Cyan
        '37': 'color:#ccc;',           // White (using a light gray for typical dark UIs)
        // Bright text colors
        '90': 'color:gray;',           // Bright Black (Gray)
        '91': 'color:lightcoral;',     // Bright Red
        '92': 'color:lightgreen;',     // Bright Green
        '93': 'color:yellow;',         // Bright Yellow
        '94': 'color:lightblue;',      // Bright Blue
        '95': 'color:lightpink;',      // Bright Magenta
        '96': 'color:lightcyan;',      // Bright Cyan
        '97': 'color:white;',          // Bright White
        // Font weight
        '1': 'font-weight:bold;',
        '22': 'font-weight:normal;', // Reset bold/dim
        // Note: Add background colors (40-47, 100-107) or other styles if needed
    };

    let currentStyles: string[] = [];

    const parts = text.split(/(\x1b\[[0-9;]*m)/g);
    let resultHtml = '';

    for (const part of parts) {
        if (part.startsWith('\x1b[') && part.endsWith('m')) { // This part IS an ANSI code
            const codesString = part.substring(2, part.length - 1);
            const codes = codesString.split(';');

            if (codesString === '' || codes.includes('0')) { // Reset all attributes ([m or [0m)
                currentStyles = [];
            } else {
                for (const code of codes) {
                    const style = colorMap[code];
                    if (style !== undefined) {
                        if (style === null || style === '') { // Explicit reset for a category if defined (e.g. colorMap['39'] = null for default color)
                            // For simplicity, '0' handles full reset. Specific resets like '39' (default fg) would need more logic.
                            // currentStyles = currentStyles.filter(s => !s.startsWith('color:')); // Example for default color reset
                        } else {
                            // Remove conflicting styles (e.g., new color replaces old color)
                            if (style.startsWith('color:')) {
                                currentStyles = currentStyles.filter(s => !s.startsWith('color:'));
                            }
                            if (style.startsWith('font-weight:')) {
                                currentStyles = currentStyles.filter(s => !s.startsWith('font-weight:'));
                            }
                            // Add new style if not already present (to avoid duplicate font-weight:bold;font-weight:bold)
                            if (!currentStyles.includes(style)) {
                                currentStyles.push(style);
                            }
                        }
                    }
                }
            }
        } else { // This is a text part
            if (part) { // If it's not an empty string (which can happen from split)
                // Escape HTML special characters in the text part to prevent XSS if the original text could contain them
                // For this specific use case (output from own script), it might be less critical,
                // but it's a good practice.
                const escapedPart = part.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                if (currentStyles.length > 0) {
                    resultHtml += `<span style="${currentStyles.join('')}">${escapedPart}</span>`;
                } else {
                    resultHtml += escapedPart;
                }
            }
        }
    }
    return resultHtml;
}

export default function CSPGeneratorPage() {
    const [projectPath, setProjectPath] = useState('./my-secure-app'); // Default or last used
    const [addCsp, setAddCsp] = useState(false);
    const [indexPath, setIndexPath] = useState('public/index.html');
    const [deleteOldCsp, setDeleteOldCsp] = useState(false);
    const [cspType, setCspType] = useState<'production' | 'development' | ''>('');
    const [output, setOutput] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);
        setOutput(null);
        setError(null);

        const options = {
            projectPath,
            addCsp,
            indexPath: addCsp ? indexPath : null, // Only send indexPath if addCsp is true
            deleteOldCsp: addCsp ? deleteOldCsp : null,
            cspType: addCsp ? cspType : null,
        };

        try {
            const response = await fetch('/api/generate-csp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(options),
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || 'Failed to generate CSP');
            }
            setOutput(result.output);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen bg-gray-900 text-gray-100 p-4 md:p-8">
            <div className="max-w-4xl mx-auto">
                <div className="mb-6">
                    <Link href="/"
                        className="flex items-center text-indigo-400 hover:text-indigo-300">
                        <FiArrowLeft className="mr-2" /> Back to Scanner
                    </Link>
                </div>

                <h1 className="text-3xl font-bold mb-6 text-center">CSP Generator</h1>

                <form onSubmit={handleSubmit} className="bg-gray-800 p-6 rounded-lg shadow-xl space-y-6">
                    <div>
                        <label htmlFor="projectPath" className="block text-sm font-medium text-gray-300 mb-1">
                            Project Path (relative to workspace root)
                        </label>
                        <input
                            type="text"
                            id="projectPath"
                            value={projectPath}
                            onChange={(e) => setProjectPath(e.target.value)}
                            required
                            className="w-full p-2 border border-gray-700 rounded-md bg-gray-900 text-gray-100 focus:ring-indigo-500 focus:border-indigo-500"
                            placeholder="e.g., ./my-react-app or vulnerability-scanner"
                        />
                        <p className="text-xs text-gray-500 mt-1">Path to the root of the project you want to scan (e.g., ./my-secure-app). This path is relative to the root of the `find_react_vulnerabilities` workspace.</p>
                    </div>

                    <div className="flex items-start">
                        <div className="flex items-center h-5">
                            <input
                                id="addCsp"
                                type="checkbox"
                                checked={addCsp}
                                onChange={(e) => setAddCsp(e.target.checked)}
                                className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-600 rounded bg-gray-700"
                            />
                        </div>
                        <div className="ml-3 text-sm">
                            <label htmlFor="addCsp" className="font-medium text-gray-200">
                                Add CSP to HTML file?
                            </label>
                            <p className="text-gray-400">Add the generated CSP as a &lt;meta&gt; tag to an HTML file.</p>
                        </div>
                    </div>

                    {addCsp && (
                        <div className="space-y-4 pl-8 border-l border-gray-700 ml-2">
                            <div>
                                <label htmlFor="indexPath" className="block text-sm font-medium text-gray-300 mb-1">
                                    HTML File Path (optional, relative to Project Path)
                                </label>
                                <input
                                    type="text"
                                    id="indexPath"
                                    value={indexPath}
                                    onChange={(e) => setIndexPath(e.target.value)}
                                    className="w-full p-2 border border-gray-700 rounded-md bg-gray-900 text-gray-100 focus:ring-indigo-500 focus:border-indigo-500"
                                    placeholder="e.g., public/index.html or build/index.html"
                                />
                                <p className="text-xs text-gray-500 mt-1">If not specified, defaults to common paths like public/index.html or build/index.html within the Project Path.</p>
                            </div>

                            <div className="flex items-start">
                                <div className="flex items-center h-5">
                                    <input
                                        id="deleteOldCsp"
                                        type="checkbox"
                                        checked={deleteOldCsp}
                                        onChange={(e) => setDeleteOldCsp(e.target.checked)}
                                        className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-600 rounded bg-gray-700"
                                    />
                                </div>
                                <div className="ml-3 text-sm">
                                    <label htmlFor="deleteOldCsp" className="font-medium text-gray-200">
                                        Delete existing CSP meta tags?
                                    </label>
                                    <p className="text-gray-400">If checked, existing CSP meta tags will be deleted instead of commented out.</p>
                                </div>
                            </div>

                            <div>
                                <span className="block text-sm font-medium text-gray-300 mb-1">CSP Type for HTML injection</span>
                                <div className="flex space-x-4">
                                    <label className="flex items-center">
                                        <input
                                            type="radio"
                                            name="cspType"
                                            value="production"
                                            checked={cspType === 'production'}
                                            onChange={(e) => setCspType(e.target.value as 'production')}
                                            className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-600 bg-gray-700"
                                        />
                                        <span className="ml-2 text-gray-200">Production</span>
                                    </label>
                                    <label className="flex items-center">
                                        <input
                                            type="radio"
                                            name="cspType"
                                            value="development"
                                            checked={cspType === 'development'}
                                            onChange={(e) => setCspType(e.target.value as 'development')}
                                            className="focus:ring-indigo-500 h-4 w-4 text-indigo-600 border-gray-600 bg-gray-700"
                                        />
                                        <span className="ml-2 text-gray-200">Development</span>
                                    </label>
                                </div>
                                {!cspType && <p className="text-xs text-red-400 mt-1">CSP type is required if adding to HTML.</p>}
                            </div>
                        </div>
                    )}

                    <button
                        type="submit"
                        disabled={isLoading || (addCsp && !cspType)}
                        className="w-full flex items-center justify-center py-2.5 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <FiTerminal className="mr-2" />
                        {isLoading ? 'Generating...' : 'Generate CSP'}
                    </button>
                </form>

                {error && (
                    <div className="mt-6 bg-red-900/50 border border-red-700 text-red-300 p-4 rounded-lg flex items-start">
                        <FiAlertTriangle className="h-5 w-5 mr-3 mt-1 flex-shrink-0" />
                        <div>
                            <h3 className="text-md font-semibold">Error Generating CSP</h3>
                            <pre className="whitespace-pre-wrap text-sm">{error}</pre>
                        </div>
                    </div>
                )}

                {output && (
                    <div className="mt-6 bg-gray-800 rounded-lg shadow-xl">
                        <div className="p-4">
                            <h2 className="text-xl font-semibold mb-3 flex items-center">
                                <FiCheckCircle className="h-6 w-6 mr-2 text-green-400" /> Output:
                            </h2>
                            <div
                                className="bg-gray-900 rounded-md p-4"
                            >
                                <pre
                                    className="text-sm text-gray-200 whitespace-pre-wrap"
                                    dangerouslySetInnerHTML={{ __html: ansiToHtml(output) }}
                                />
                            </div>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
} 